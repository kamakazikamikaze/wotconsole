# from collections import namedtuple
import requests
from functools import wraps

api_url = 'https://api-{}-console.worldoftanks.com/wotx/'

# Accounts


def player_search(search, application_id, fields=None, limit=None, type=None,
                  language='en', realm='xbox'):
    r'''
    Search for a player by name
    '''
    pass


def player_data(account_id, application_id, access_token=None,
                fields=None, language='en', realm='xbox'):
    r'''
    Look up player's overall statistics
    '''
    pass


def player_data_ps_uid(psnid, application_id):
    r'''
    Retrieve player info using PlayStation UID
    '''
    pass


def player_data_xbox_uid(xuid, application_id):
    r'''
    Retrieve player info using Microsoft XUID
    '''
    pass


def player_achievements(account_id, application_id,
                        fields=None, language='en', realm='xbox'):
    r'''
    View player's achievements, such as mastery badges and battle commendations
    '''
    pass


# Authentication

def player_sign_in(application_id, display=None, expires_at=None,
                   nofollow=None, redirect_uri=None, language='en'):
    pass


def extend_player_sign_in(access_token, application_id, expires_at=None):
    pass


def player_sign_out(access_token, application_id):
    pass


# Clans

def clan_search(search, application_id, fields=None, limit=None,
                page_no=None, language='en', realm='xbox'):
    r'''
    Search for clan(s)

    :param str search: Clan name
    :param str application_id: Your application key (generated by WG)
    :param str realm: 'xbox' or 'ps4'
    :param str language: Response language
    :returns: API response
    :rtype: dict
    '''
    r = requests.get(api_url.format(realm) + 'clans/list/', params={
        'search': search,
        'application_id': application_id,
        'language': language,
    })
    r.raise_status()
    return r.json()


def clan_details(clan_id, application_id, extra=None,
                 fields=None, realm='xbox'):
    pass


def clan_players(clan_id, application_id, extra=None,
                 fields=None, realm='xbox'):
    r'''
    Retrieve list of players in a clan

    :param str clan_id: Clan ID number
    :param str application_id: Your application key (generated by WG)
    :param fields: Specific fields to ONLY return
    :type fields: list(str)
    :param extra: Additional fields to retrieve
    :type extra: list(str)
    :param str realm: 'xbox' or 'ps4'
    :param str language: Response language
    :returns: API response
    :rtype: dict
    '''
    r = requests.get(api_url.format(realm) + 'clans/info/', params={
        'clan_id': clan_id,
        'application_id': application_id
    })
    r.raise_status()
    return r.json()


def clan_glossary(application_id, fields=None, language='en', realm='xbox'):
    pass


# Tankopedia

def crew_info(application_id, realm='xbox', language='en'):
    pass


def tank_info(application_id, tank_id, realm='xbox', language='en'):
    r'''
    Retrieve tank information

    :param str application_id: Your application key (generated by WG)
    :param tank_id: All desired tanks (limit 100)
    :type tank_id: list(int or str)
    :param str realm: 'xbox' or 'ps4'
    :param str language: Response language
    :returns: Tank information
    :rtype: dict
    '''
    r = requests.get(api_url.format(realm) + 'encyclopedia/vehicles', params={
        'application_id': application_id,
        'tank_id': ','.join(map(str, tank_id)),
        'language': language
    })
    return r.json()


def packages_info(application_id, realm='xbox', language='en'):
    pass


def equipment_consumable_info(application_id, realm='xbox', language='en'):
    pass


def achievement_info(application_id, realm='xbox', language='en'):
    pass


def tankopedia_info(application_id, realm='xbox', language='en'):
    pass


# Player ratings

def types_of_ratings(application_id, realm='xbox', language='en'):
    pass


def dates_with_ratings(application_id, realm='xbox', language='en'):
    pass


def player_ratings(application_id, realm='xbox', language='en'):
    pass


def adjacent_positions_in_ratings(application_id, realm='xbox', language='en'):
    pass


def top_players(application_id, realm='xbox', language='en'):
    pass

# Player's vehicles


def player_tank_statistics(account_id, application_id, access_id=None, in_garage=None,
                           fields=None, extra=None, realm='xbox', language='en'):
    r'''
    Retrieve information on all tanks that a player has owned and/or used

    :param int account_id: target player ID
    :param str application_id: Your application key (generated by WG)
    :param str access_id: Authentication token from player login (if accessing
                          private data)
    :param str in_garage: Filter ('0') for tanks absent from garage, or ('1')
                          available
    :type extra: list(str)
    :param str realm: 'xbox' or 'ps4'
    :param str language: Response language
    :returns: API response
    :rtype: dict
    '''
    r = requests.get(api_url.format(realm) + 'tanks/stats/', params={
        'account_id': account_id,
        'application_id': application_id,
        'access_id': access_id,
        'in_garage': in_garage,
        'fields': fields,
        'extra': extra,
        'language': language,
    })
    r.raise_status()
    return r.json()


def player_tank_achievements(application_id, realm='xbox', language='en'):
    pass


class wotConsoleAPI(object):
    r'''
    Wargaming API helper for Console calls

    Aide for interacting with WG's developer API for accessing game information

    :param str application_id: Your application key (generated by WG)
    :param str language: Language for responses
    :param str realm: 'xbox' or 'ps4'
    '''

    def __init__(self, application_id=None,
                 language='en', realm='xbox', **extras):
        self.application_id = application_id
        self.language = language
        self.url = api_url.format(
            realm)

    def add_settings(self, function):
        @wraps(function)
        def wrapper(*args, **kwargs):
            args += (self.application_id,)
            kwargs.update({
                'language': self.language,
                'realm': self.realm
            })
            return function(*args, **kwargs)
        return wrapper

    # TODO: Wrap methods to auto-pass __init__ values as keyword arguments
    @add_settings
    def clan_search(self, search, *args, **kwargs):
        return clan_search(search, *args, **kwargs)
